<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neural Network</name>
    </assembly>
    <members>
        <member name="M:NN.ActivationMethods.LogisticSigmoidDerivative(System.Double)">
            ===========
            Derivatives
            ===========
        </member>
        <member name="T:NN.BackPropagation">
            <summary>
            Uses Back Propagation To Train Neural Network
            Back Propagation is the fastest technique but is not very accurate
            </summary>
        </member>
        <member name="T:NN.NeuralNetwork">
            <summary>
            Please use the following classes instead for creating and training the neural network
            BackPropagation
            ParticleSwarmOptimisation
            GeneticAlgorithm
            </summary>
        </member>
        <member name="F:NN.NeuralNetwork.hOutputs">
            <summary>
            Contains values for hidden layers (Use this to create better deep learning algorithm)
            </summary>
        </member>
        <member name="M:NN.NeuralNetwork.#ctor(System.Int32,System.Int32,System.Int32,NN.ActivationType,NN.ActivationType)">
            <summary>
            Initialise Neural Network
            </summary>
            <param name="input">Length of input layer</param>
            <param name="hidden">Length of hidden layer</param>
            <param name="output">Length of output layer</param>
            <param name="hType">which type of activation method would be used in hidden</param>
            <param name="oType">which type of activation method would be used in output</param>
        </member>
        <member name="M:NN.NeuralNetwork.ComputeResults(System.Double[])">
            <summary>
            Use Neural Network to calculate the output
            </summary>
            <param name="input">array of inputs for calculating output NOTE: array length must equal input</param>
            <returns></returns>
        </member>
        <member name="M:NN.NeuralNetwork.GetWeights">
            <summary>
            Get weights and biases
            </summary>
            <returns>a double array of data containning weights and biases</returns>
        </member>
        <member name="M:NN.NeuralNetwork.SetWeights(System.Double[])">
            <summary>
            Set weights and biases
            </summary>
            <param name="data">an double array containning weights and biases NOTE: array length must equal weights length + biases length</param>
        </member>
        <member name="M:NN.NeuralNetwork.GenerateWeights">
            <summary>
            Generates Random values for weights and biases
            </summary>
        </member>
        <member name="M:NN.NeuralNetwork.Accuracy(System.Double[][])">
            <summary>
            Checks how many test data it gets right
            </summary>
            <param name="data">list of test data</param>
            <returns>percentage of acuracy</returns>
        </member>
        <member name="P:NN.NeuralNetwork.Input">
            <summary>
            How many nodes are in input layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Hidden">
            <summary>
            How many nodes are in hidden layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Output">
            <summary>
            how many nodes are in output layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Hidden_Type">
            <summary>
            Which type of activation should be used for hidden layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Output_Type">
            <summary>
            Which type of activation should be used for output layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.IH_Weights">
            <summary>
            Array of weights linking input and hidden layers
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.HO_Weights">
            <summary>
            Array of weights linking hidden and output layers
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Hidden_Biases">
            <summary>
            biases for hidden layer
            </summary>
        </member>
        <member name="P:NN.NeuralNetwork.Output_Biases">
            <summary>
            biases for output layer
            </summary>
        </member>
        <member name="M:NN.BackPropagation.#ctor(System.Int32,System.Int32,System.Int32,NN.ActivationType,NN.ActivationType)">
            <summary>
            Initialise Neural Network and Back Propagation learning
            </summary>
            <param name="input">Length of input layer</param>
            <param name="hidden">Length of hidden layer</param>
            <param name="output">Length of output layer</param>
            <param name="hType">which type of activation method would be used in hidden</param>
            <param name="oType">which type of activation method would be used in output</param>
        </member>
        <member name="M:NN.BackPropagation.#ctor(NN.NeuralNetwork)">
            <summary>
            Initialise Neural Network and Back Propagation learning
            </summary>
            <param name="nn">Use Existing Neural Network</param>
        </member>
        <member name="M:NN.BackPropagation.Train(System.Double[][],System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Use this method to train the neural network
            </summary>
            <param name="data">A array containning the input and output for the neural network to learn</param>
            <param name="learnRate">How fast network should learn</param>
            <param name="momentum">How fast should neural network change</param>
            <param name="weightDecay">How fast should neural network forget</param>
            <param name="repeat">How many times would you like to repeat the trainning data</param>
        </member>
        <member name="T:NN.ParticleSwarmOptimisation">
            <summary>
            Uses Particle Swarm Optimisation To Train Neural Network
            Particle Swarm Optimisation is faster then genetic algorithm and slower then back propagation.
            Generally the best technique to train neural network.
            </summary>
        </member>
        <member name="M:NN.ParticleSwarmOptimisation.#ctor(System.Int32,System.Int32,System.Int32,NN.ActivationType,NN.ActivationType)">
            <summary>
            Initialise Neural Network and Back Propagation learning
            </summary>
            <param name="input">Length of input layer</param>
            <param name="hidden">Length of hidden layer</param>
            <param name="output">Length of output layer</param>
            <param name="hType">which type of activation method would be used in hidden</param>
            <param name="oType">which type of activation method would be used in output</param>
        </member>
        <member name="M:NN.ParticleSwarmOptimisation.#ctor(NN.NeuralNetwork)">
            <summary>
            Initialise Neural Network and Back Propagation learning
            </summary>
            <param name="nn">Use Existing Neural Network</param>
        </member>
        <member name="M:NN.ParticleSwarmOptimisation.Train(System.Double[][],System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Use this method to train the neural network
            </summary>
            <param name="data">A array containning the input and output for the neural network to learn</param>
            <param name="particles">How many particles there should be for trainning</param>
            <param name="exitError">If the error is as low as this value the trainning will stop</param>
            <param name="deathProbability">Death Probability</param>
            <param name="repeat">How many times would you like to repeat the trainning data</param>
        </member>
        <member name="T:NN.ParticleSwarmOptimisation.Particle">
            <summary>
            Uses Back Propagation To Train Neural Network
            </summary>
        </member>
    </members>
</doc>
